<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Super Admin Portal - SyncedUp Insurance</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/date-fns@2.29.3/index.min.js"></script>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        
        :root {
            --primary: #667eea;
            --primary-dark: #5a67d8;
            --success: #48bb78;
            --warning: #ed8936;
            --danger: #f56565;
            --info: #4299e1;
            --gray-100: #f7fafc;
            --gray-200: #edf2f7;
            --gray-300: #e2e8f0;
            --gray-500: #a0aec0;
            --gray-700: #4a5568;
            --gray-800: #2d3748;
            --shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: #f5f5f5;
            line-height: 1.6;
        }

        .layout {
            display: flex;
            min-height: 100vh;
        }

        /* Sidebar */
        .sidebar {
            width: 280px;
            background: linear-gradient(180deg, var(--primary) 0%, var(--primary-dark) 100%);
            color: white;
            position: fixed;
            height: 100vh;
            overflow-y: auto;
            z-index: 1000;
            transition: transform 0.3s ease;
        }

        .sidebar-header {
            padding: 2rem 1.5rem 1rem;
            border-bottom: 1px solid rgba(255,255,255,0.1);
        }

        .sidebar-header h1 {
            font-size: 1.5rem;
            font-weight: 700;
            margin-bottom: 0.5rem;
        }

        .sidebar-header p {
            opacity: 0.8;
            font-size: 0.9rem;
        }

        .sidebar-nav {
            padding: 1rem 0;
        }

        .nav-item {
            display: block;
            padding: 0.75rem 1.5rem;
            color: rgba(255,255,255,0.9);
            text-decoration: none;
            transition: all 0.2s;
            border: none;
            background: none;
            width: 100%;
            text-align: left;
            cursor: pointer;
        }

        .nav-item:hover, .nav-item.active {
            background: rgba(255,255,255,0.1);
            color: white;
            padding-left: 2rem;
        }

        .nav-item i {
            width: 20px;
            margin-right: 0.75rem;
        }

        /* Main Content */
        .main-content {
            flex: 1;
            margin-left: 280px;
            background: var(--gray-100);
            min-height: 100vh;
        }

        .header {
            background: white;
            padding: 1rem 2rem;
            box-shadow: var(--shadow);
            display: flex;
            justify-content: between;
            align-items: center;
            position: sticky;
            top: 0;
            z-index: 100;
        }

        .header-left {
            flex: 1;
        }

        .header-right {
            display: flex;
            align-items: center;
            gap: 1rem;
        }

        .page-title {
            font-size: 1.75rem;
            font-weight: 700;
            color: var(--gray-800);
        }

        .page-subtitle {
            color: var(--gray-500);
            margin-top: 0.25rem;
        }

        .content {
            padding: 2rem;
        }

        .page-section {
            display: none;
        }

        .page-section.active {
            display: block;
        }

        /* Cards */
        .card {
            background: white;
            border-radius: 12px;
            box-shadow: var(--shadow);
            padding: 2rem;
            margin-bottom: 2rem;
        }

        .card-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1.5rem;
        }

        .card-title {
            font-size: 1.25rem;
            font-weight: 600;
            color: var(--gray-800);
        }

        /* Stats Grid */
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
            gap: 1.5rem;
            margin-bottom: 2rem;
        }

        .stat-card {
            background: white;
            padding: 2rem;
            border-radius: 12px;
            box-shadow: var(--shadow);
            position: relative;
            overflow: hidden;
        }

        .stat-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 4px;
            height: 100%;
            background: var(--primary);
        }

        .stat-icon {
            width: 50px;
            height: 50px;
            border-radius: 12px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.5rem;
            margin-bottom: 1rem;
        }

        .stat-value {
            font-size: 2.5rem;
            font-weight: 700;
            color: var(--gray-800);
            line-height: 1;
        }

        .stat-label {
            color: var(--gray-500);
            font-size: 0.9rem;
            margin: 0.5rem 0;
        }

        .stat-change {
            font-size: 0.85rem;
            font-weight: 500;
        }

        .stat-change.positive { color: var(--success); }
        .stat-change.negative { color: var(--danger); }

        /* Charts */
        .chart-container {
            position: relative;
            height: 400px;
            margin: 1rem 0;
        }

        .chart-small {
            height: 200px;
        }

        /* Tables */
        .table-container {
            background: white;
            border-radius: 12px;
            overflow: hidden;
            box-shadow: var(--shadow);
        }

        table {
            width: 100%;
            border-collapse: collapse;
        }

        th {
            background: var(--gray-100);
            padding: 1rem;
            text-align: left;
            font-weight: 600;
            color: var(--gray-700);
            border-bottom: 2px solid var(--gray-200);
        }

        td {
            padding: 1rem;
            border-bottom: 1px solid var(--gray-200);
        }

        tr:hover {
            background: var(--gray-50);
        }

        /* Buttons */
        .btn {
            padding: 0.75rem 1.5rem;
            border: none;
            border-radius: 8px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.2s;
            text-decoration: none;
            display: inline-block;
            text-align: center;
        }

        .btn-primary { background: var(--primary); color: white; }
        .btn-primary:hover { background: var(--primary-dark); }
        .btn-success { background: var(--success); color: white; }
        .btn-warning { background: var(--warning); color: white; }
        .btn-danger { background: var(--danger); color: white; }
        .btn-info { background: var(--info); color: white; }

        .btn-sm {
            padding: 0.5rem 1rem;
            font-size: 0.85rem;
        }

        /* Status indicators */
        .status-active { color: var(--success); font-weight: 600; }
        .status-inactive { color: var(--danger); font-weight: 600; }
        .status-warning { color: var(--warning); font-weight: 600; }

        /* Alerts */
        .alert {
            padding: 1rem;
            border-radius: 8px;
            margin: 1rem 0;
            display: none;
        }

        .alert.show { display: block; }
        .alert-success { background: #d1fae5; color: #065f46; border: 1px solid #34d399; }
        .alert-error { background: #fee2e2; color: #991b1b; border: 1px solid #f87171; }
        .alert-warning { background: #fef3c7; color: #92400e; border: 1px solid #fbbf24; }

        /* Forms */
        .form-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 1.5rem;
        }

        .form-group {
            margin-bottom: 1.5rem;
        }

        .form-group label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: 500;
            color: var(--gray-700);
        }

        .form-group input,
        .form-group select,
        .form-group textarea {
            width: 100%;
            padding: 0.75rem;
            border: 1px solid var(--gray-300);
            border-radius: 8px;
            font-size: 0.95rem;
        }

        .form-group input:focus,
        .form-group select:focus,
        .form-group textarea:focus {
            outline: none;
            border-color: var(--primary);
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }

        /* Modals */
        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            z-index: 2000;
            backdrop-filter: blur(4px);
        }

        .modal.show { display: flex; align-items: center; justify-content: center; }

        .modal-content {
            background: white;
            padding: 2rem;
            border-radius: 12px;
            max-width: 600px;
            width: 90%;
            max-height: 80vh;
            overflow-y: auto;
            position: relative;
        }

        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 2rem;
            padding-bottom: 1rem;
            border-bottom: 1px solid var(--gray-200);
        }

        .modal-title {
            font-size: 1.5rem;
            font-weight: 600;
            color: var(--gray-800);
        }

        .modal-close {
            background: none;
            border: none;
            font-size: 1.5rem;
            cursor: pointer;
            color: var(--gray-500);
            padding: 0.5rem;
        }

        /* Real-time indicators */
        .live-indicator {
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            font-size: 0.85rem;
            color: var(--success);
        }

        .live-dot {
            width: 8px;
            height: 8px;
            background: var(--success);
            border-radius: 50%;
            animation: pulse 2s infinite;
        }

        @keyframes pulse {
            0% { opacity: 1; }
            50% { opacity: 0.5; }
            100% { opacity: 1; }
        }

        /* Responsive */
        @media (max-width: 768px) {
            .sidebar {
                transform: translateX(-100%);
            }
            
            .sidebar.open {
                transform: translateX(0);
            }
            
            .main-content {
                margin-left: 0;
            }
            
            .stats-grid {
                grid-template-columns: 1fr;
            }
            
            .content {
                padding: 1rem;
            }
        }

        /* Loading states */
        .loading {
            display: inline-block;
            width: 20px;
            height: 20px;
            border: 2px solid var(--gray-300);
            border-radius: 50%;
            border-top-color: var(--primary);
            animation: spin 1s ease-in-out infinite;
        }

        @keyframes spin {
            to { transform: rotate(360deg); }
        }

        /* Leaderboard styles */
        .leaderboard-item {
            display: flex;
            align-items: center;
            padding: 1rem;
            background: white;
            border-radius: 8px;
            margin-bottom: 0.5rem;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        .leaderboard-rank {
            font-size: 1.5rem;
            font-weight: bold;
            width: 50px;
            color: var(--primary);
        }

        .leaderboard-info {
            flex: 1;
            margin-left: 1rem;
        }

        .leaderboard-value {
            font-size: 1.25rem;
            font-weight: 600;
            color: var(--success);
        }

        /* Badge styles */
        .badge {
            display: inline-block;
            padding: 0.25rem 0.75rem;
            border-radius: 20px;
            font-size: 0.75rem;
            font-weight: 600;
            text-transform: uppercase;
        }

        .badge-success { background: var(--success); color: white; }
        .badge-warning { background: var(--warning); color: white; }
        .badge-danger { background: var(--danger); color: white; }
        .badge-info { background: var(--info); color: white; }
        .badge-secondary { background: var(--gray-500); color: white; }
    </style>
</head>
<body>
    <div class="layout">
        <!-- Sidebar -->
        <nav class="sidebar" id="sidebar">
            <div class="sidebar-header">
                <h1>Super Admin Portal</h1>
                <p>Complete Business Management</p>
                <div class="live-indicator">
                    <div class="live-dot"></div>
                    Real-time Active
                </div>
            </div>
            
            <div class="sidebar-nav">
                <button class="nav-item active" onclick="showPage('dashboard')">
                    <i>📊</i> Enhanced Dashboard
                </button>
                <button class="nav-item" onclick="showPage('analytics')">
                    <i>📈</i> System Analytics
                </button>
                <button class="nav-item" onclick="showPage('agencies')">
                    <i>🏢</i> Agency Management
                </button>
                <button class="nav-item" onclick="showPage('revenue')">
                    <i>💰</i> Revenue Management
                </button>
                <button class="nav-item" onclick="showPage('users')">
                    <i>👥</i> User Administration
                </button>
                <button class="nav-item" onclick="showPage('system')">
                    <i>⚙️</i> System Settings
                </button>
                <button class="nav-item" onclick="showPage('leaderboard')">
                    <i>🏆</i> Global Leaderboard
                </button>
                <button class="nav-item" onclick="logout()" style="margin-top: 2rem; color: rgba(255,255,255,0.7);">
                    <i>🚪</i> Logout
                </button>
            </div>
        </nav>

        <!-- Main Content -->
        <div class="main-content">
            <div class="header">
                <div class="header-left">
                    <h1 class="page-title" id="pageTitle">Enhanced Dashboard</h1>
                    <p class="page-subtitle" id="pageSubtitle">Real-time business metrics and insights</p>
                </div>
                <div class="header-right">
                    <div class="live-indicator">
                        <div class="live-dot"></div>
                        Last Updated: <span id="lastUpdate">Now</span>
                    </div>
                    <button class="btn btn-primary" onclick="refreshAllData()">
                        <span id="refreshBtn">🔄 Refresh</span>
                    </button>
                </div>
            </div>

            <div class="content">
                <!-- Enhanced Dashboard -->
                <div id="dashboard" class="page-section active">
                    <!-- Key Metrics -->
                    <div class="stats-grid">
                        <div class="stat-card">
                            <div class="stat-icon" style="background: rgba(72,187,120,0.1); color: var(--success);">💰</div>
                            <div class="stat-value" id="totalRevenue">$0</div>
                            <div class="stat-label">Total Revenue</div>
                            <div class="stat-change positive" id="revenueChange">+0% from last month</div>
                        </div>
                        
                        <div class="stat-card">
                            <div class="stat-icon" style="background: rgba(102,126,234,0.1); color: var(--primary);">🏢</div>
                            <div class="stat-value" id="activeAgencies">0</div>
                            <div class="stat-label">Active Agencies</div>
                            <div class="stat-change positive" id="agenciesChange">+0 this month</div>
                        </div>
                        
                        <div class="stat-card">
                            <div class="stat-icon" style="background: rgba(237,137,54,0.1); color: var(--warning);">👥</div>
                            <div class="stat-value" id="totalUsers">0</div>
                            <div class="stat-label">Total Users</div>
                            <div class="stat-change positive" id="usersChange">+0% active today</div>
                        </div>
                        
                        <div class="stat-card">
                            <div class="stat-icon" style="background: rgba(245,101,101,0.1); color: var(--danger);">📈</div>
                            <div class="stat-value" id="apiCalls">0</div>
                            <div class="stat-label">API Calls/Hour</div>
                            <div class="stat-change positive" id="apiChange">Avg response: 0ms</div>
                        </div>
                    </div>

                    <!-- Revenue Chart -->
                    <div class="card">
                        <div class="card-header">
                            <h3 class="card-title">Revenue Analytics</h3>
                            <div>
                                <select id="revenueTimeframe" onchange="updateRevenueChart()">
                                    <option value="7d">Last 7 Days</option>
                                    <option value="30d" selected>Last 30 Days</option>
                                    <option value="90d">Last 90 Days</option>
                                    <option value="1y">Last Year</option>
                                </select>
                            </div>
                        </div>
                        <div class="chart-container">
                            <canvas id="revenueChart"></canvas>
                        </div>
                    </div>

                    <!-- Performance Metrics Grid -->
                    <div class="form-grid">
                        <div class="card">
                            <h3 class="card-title">System Performance</h3>
                            <div class="chart-container chart-small">
                                <canvas id="performanceChart"></canvas>
                            </div>
                        </div>
                        
                        <div class="card">
                            <h3 class="card-title">User Activity</h3>
                            <div class="chart-container chart-small">
                                <canvas id="activityChart"></canvas>
                            </div>
                        </div>
                    </div>

                    <!-- Recent Activities -->
                    <div class="card">
                        <div class="card-header">
                            <h3 class="card-title">Recent System Events</h3>
                            <button class="btn btn-sm btn-primary" onclick="loadSystemEvents()">Refresh Events</button>
                        </div>
                        <div id="recentEvents">
                            <div style="text-align: center; padding: 2rem; color: var(--gray-500);">Loading recent events...</div>
                        </div>
                    </div>
                </div>

                <!-- System Analytics -->
                <div id="analytics" class="page-section">
                    <!-- Real-time Server Metrics -->
                    <div class="stats-grid">
                        <div class="stat-card">
                            <div class="stat-icon" style="background: rgba(66,153,225,0.1); color: var(--info);">🖥️</div>
                            <div class="stat-value" id="cpuUsage">0%</div>
                            <div class="stat-label">CPU Usage</div>
                            <div class="stat-change" id="cpuChange">Current load</div>
                        </div>
                        
                        <div class="stat-card">
                            <div class="stat-icon" style="background: rgba(159,122,234,0.1); color: #9f7aea;">💾</div>
                            <div class="stat-value" id="memoryUsage">0%</div>
                            <div class="stat-label">Memory Usage</div>
                            <div class="stat-change" id="memoryChange">Available: 0GB</div>
                        </div>
                        
                        <div class="stat-card">
                            <div class="stat-icon" style="background: rgba(72,187,120,0.1); color: var(--success);">🔗</div>
                            <div class="stat-value" id="dbConnections">0</div>
                            <div class="stat-label">DB Connections</div>
                            <div class="stat-change" id="dbChange">Pool: 0/100</div>
                        </div>
                        
                        <div class="stat-card">
                            <div class="stat-icon" style="background: rgba(237,137,54,0.1); color: var(--warning);">⚠️</div>
                            <div class="stat-value" id="errorRate">0%</div>
                            <div class="stat-label">Error Rate</div>
                            <div class="stat-change" id="errorChange">Last 24h</div>
                        </div>
                    </div>

                    <!-- Analytics Charts -->
                    <div class="form-grid">
                        <div class="card">
                            <h3 class="card-title">Response Time Trends</h3>
                            <div class="chart-container">
                                <canvas id="responseTimeChart"></canvas>
                            </div>
                        </div>
                        
                        <div class="card">
                            <h3 class="card-title">API Endpoint Traffic</h3>
                            <div class="chart-container">
                                <canvas id="endpointChart"></canvas>
                            </div>
                        </div>
                    </div>

                    <!-- Error Tracking -->
                    <div class="card">
                        <div class="card-header">
                            <h3 class="card-title">System Alerts & Errors</h3>
                            <div>
                                <button class="btn btn-sm btn-warning" onclick="clearAlerts()">Clear All</button>
                                <button class="btn btn-sm btn-primary" onclick="loadSystemAlerts()">Refresh</button>
                            </div>
                        </div>
                        <div id="systemAlerts">
                            <div style="text-align: center; padding: 2rem; color: var(--gray-500);">Loading system alerts...</div>
                        </div>
                    </div>
                </div>

                <!-- Agency Management -->
                <div id="agencies" class="page-section">
                    <!-- Agency Performance Stats -->
                    <div class="stats-grid">
                        <div class="stat-card">
                            <div class="stat-icon" style="background: rgba(102,126,234,0.1); color: var(--primary);">🏆</div>
                            <div class="stat-value" id="topAgencyRevenue">$0</div>
                            <div class="stat-label">Top Agency Revenue</div>
                            <div class="stat-change positive" id="topAgencyName">Loading...</div>
                        </div>
                        
                        <div class="stat-card">
                            <div class="stat-icon" style="background: rgba(72,187,120,0.1); color: var(--success);">📊</div>
                            <div class="stat-value" id="avgRevenuePerAgency">$0</div>
                            <div class="stat-label">Avg Revenue/Agency</div>
                            <div class="stat-change" id="avgRevenueChange">Per month</div>
                        </div>
                        
                        <div class="stat-card">
                            <div class="stat-icon" style="background: rgba(237,137,54,0.1); color: var(--warning);">⚠️</div>
                            <div class="stat-value" id="agenciesBelowTarget">0</div>
                            <div class="stat-label">Below Target</div>
                            <div class="stat-change negative" id="belowTargetPercent">0% of agencies</div>
                        </div>
                        
                        <div class="stat-card">
                            <div class="stat-icon" style="background: rgba(245,101,101,0.1); color: var(--danger);">📉</div>
                            <div class="stat-value" id="churnRisk">0</div>
                            <div class="stat-label">Churn Risk</div>
                            <div class="stat-change negative" id="churnRiskPercent">High risk agencies</div>
                        </div>
                    </div>

                    <!-- Agency Management Tools -->
                    <div class="card">
                        <div class="card-header">
                            <h3 class="card-title">Agency Control Panel</h3>
                            <button class="btn btn-success" onclick="showCreateAgencyModal()">+ Create Agency</button>
                        </div>
                        
                        <!-- Search and Filters -->
                        <div class="form-grid" style="margin-bottom: 1.5rem;">
                            <div class="form-group">
                                <input type="text" id="agencySearch" placeholder="Search agencies..." onkeyup="filterAgencies()">
                            </div>
                            <div class="form-group">
                                <select id="agencyStatusFilter" onchange="filterAgencies()">
                                    <option value="">All Statuses</option>
                                    <option value="active">Active</option>
                                    <option value="suspended">Suspended</option>
                                    <option value="inactive">Inactive</option>
                                </select>
                            </div>
                        </div>

                        <!-- Agency Table -->
                        <div class="table-container">
                            <table>
                                <thead>
                                    <tr>
                                        <th>Agency</th>
                                        <th>Performance</th>
                                        <th>Revenue</th>
                                        <th>Users</th>
                                        <th>Status</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody id="agenciesTable">
                                    <tr><td colspan="6" style="text-align: center; padding: 2rem;">Loading agencies...</td></tr>
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>

                <!-- Revenue Management -->
                <div id="revenue" class="page-section">
                    <!-- Financial KPIs -->
                    <div class="stats-grid">
                        <div class="stat-card">
                            <div class="stat-icon" style="background: rgba(72,187,120,0.1); color: var(--success);">💰</div>
                            <div class="stat-value" id="mrr">$0</div>
                            <div class="stat-label">Monthly Recurring Revenue</div>
                            <div class="stat-change positive" id="mrrChange">+0% this month</div>
                        </div>
                        
                        <div class="stat-card">
                            <div class="stat-icon" style="background: rgba(102,126,234,0.1); color: var(--primary);">📈</div>
                            <div class="stat-value" id="arr">$0</div>
                            <div class="stat-label">Annual Recurring Revenue</div>
                            <div class="stat-change positive" id="arrChange">Projected growth</div>
                        </div>
                        
                        <div class="stat-card">
                            <div class="stat-icon" style="background: rgba(237,137,54,0.1); color: var(--warning);">🎯</div>
                            <div class="stat-value" id="ltv">$0</div>
                            <div class="stat-label">Customer LTV</div>
                            <div class="stat-change" id="ltvChange">Average lifetime value</div>
                        </div>
                        
                        <div class="stat-card">
                            <div class="stat-icon" style="background: rgba(245,101,101,0.1); color: var(--danger);">📊</div>
                            <div class="stat-value" id="cac">$0</div>
                            <div class="stat-label">Customer Acquisition Cost</div>
                            <div class="stat-change" id="cacChange">LTV:CAC ratio</div>
                        </div>
                    </div>

                    <!-- Revenue Analytics -->
                    <div class="form-grid">
                        <div class="card">
                            <h3 class="card-title">Revenue Forecasting</h3>
                            <div class="chart-container">
                                <canvas id="forecastChart"></canvas>
                            </div>
                        </div>
                        
                        <div class="card">
                            <h3 class="card-title">Billing Overview</h3>
                            <div id="billingOverview">
                                <div class="stats-grid">
                                    <div class="stat-card">
                                        <div class="stat-value" id="upcomingRenewals">0</div>
                                        <div class="stat-label">Upcoming Renewals</div>
                                        <button class="btn btn-sm btn-info" onclick="showRenewals()">View All</button>
                                    </div>
                                    <div class="stat-card">
                                        <div class="stat-value" id="failedPayments">0</div>
                                        <div class="stat-label">Failed Payments</div>
                                        <button class="btn btn-sm btn-warning" onclick="showFailedPayments()">Retry All</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Financial Management Tools -->
                    <div class="card">
                        <div class="card-header">
                            <h3 class="card-title">Financial Operations</h3>
                            <div>
                                <button class="btn btn-info" onclick="generateFinancialReport()">📊 Generate Report</button>
                                <button class="btn btn-warning" onclick="processRefunds()">🔄 Process Refunds</button>
                            </div>
                        </div>
                        <div id="financialOperations">
                            <div style="text-align: center; padding: 2rem; color: var(--gray-500);">Financial operations panel will load here...</div>
                        </div>
                    </div>
                </div>

                <!-- User Administration -->
                <div id="users" class="page-section">
                    <!-- User Metrics -->
                    <div class="stats-grid">
                        <div class="stat-card">
                            <div class="stat-icon" style="background: rgba(102,126,234,0.1); color: var(--primary);">👥</div>
                            <div class="stat-value" id="totalUsersCount">0</div>
                            <div class="stat-label">Total Users</div>
                            <div class="stat-change positive" id="totalUsersChange">All roles</div>
                        </div>
                        
                        <div class="stat-card">
                            <div class="stat-icon" style="background: rgba(72,187,120,0.1); color: var(--success);">✅</div>
                            <div class="stat-value" id="activeUsersDaily">0</div>
                            <div class="stat-label">Daily Active Users</div>
                            <div class="stat-change positive" id="dauChange">+0% from yesterday</div>
                        </div>
                        
                        <div class="stat-card">
                            <div class="stat-icon" style="background: rgba(237,137,54,0.1); color: var(--warning);">📈</div>
                            <div class="stat-value" id="userGrowthRate">0%</div>
                            <div class="stat-label">Growth Rate</div>
                            <div class="stat-change positive" id="growthChange">Monthly growth</div>
                        </div>
                        
                        <div class="stat-card">
                            <div class="stat-icon" style="background: rgba(245,101,101,0.1); color: var(--danger);">🔒</div>
                            <div class="stat-value" id="lockedAccounts">0</div>
                            <div class="stat-label">Locked Accounts</div>
                            <div class="stat-change" id="lockedChange">Requires attention</div>
                        </div>
                    </div>

                    <!-- User Management Tools -->
                    <div class="card">
                        <div class="card-header">
                            <h3 class="card-title">User Management</h3>
                            <div>
                                <button class="btn btn-success" onclick="showCreateUserModal()">+ Create User</button>
                                <button class="btn btn-info" onclick="exportUserData()">📊 Export Data</button>
                            </div>
                        </div>

                        <!-- User Filters -->
                        <div class="form-grid" style="margin-bottom: 1.5rem;">
                            <div class="form-group">
                                <input type="text" id="userSearch" placeholder="Search users..." onkeyup="filterUsers()">
                            </div>
                            <div class="form-group">
                                <select id="roleFilter" onchange="filterUsers()">
                                    <option value="">All Roles</option>
                                    <option value="super_admin">Super Admin</option>
                                    <option value="admin">Admin</option>
                                    <option value="manager">Manager</option>
                                    <option value="agent">Agent</option>
                                    <option value="customer_service">Customer Service</option>
                                </select>
                            </div>
                        </div>

                        <!-- User Table -->
                        <div class="table-container">
                            <table>
                                <thead>
                                    <tr>
                                        <th>User</th>
                                        <th>Role</th>
                                        <th>Agency</th>
                                        <th>Last Active</th>
                                        <th>Status</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody id="usersTable">
                                    <tr><td colspan="6" style="text-align: center; padding: 2rem;">Loading users...</td></tr>
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>

                <!-- System Settings -->
                <div id="system" class="page-section">
                    <!-- System Configuration -->
                    <div class="form-grid">
                        <div class="card">
                            <h3 class="card-title">Platform Configuration</h3>
                            <div class="form-group">
                                <label>
                                    <input type="checkbox" id="maintenanceMode" onchange="toggleMaintenance()">
                                    Maintenance Mode
                                </label>
                            </div>
                            <div class="form-group">
                                <label>API Rate Limit (requests/hour)</label>
                                <input type="number" id="apiRateLimit" value="1000" onchange="updateRateLimit()">
                            </div>
                            <div class="form-group">
                                <label>Session Timeout (minutes)</label>
                                <input type="number" id="sessionTimeout" value="60" onchange="updateSessionTimeout()">
                            </div>
                            <button class="btn btn-primary" onclick="saveSystemSettings()">Save Configuration</button>
                        </div>

                        <div class="card">
                            <h3 class="card-title">Security Settings</h3>
                            <div class="form-group">
                                <label>
                                    <input type="checkbox" id="enforce2FA" onchange="toggle2FA()">
                                    Enforce 2FA for Admins
                                </label>
                            </div>
                            <div class="form-group">
                                <label>IP Whitelist (one per line)</label>
                                <textarea id="ipWhitelist" rows="4" placeholder="192.168.1.0/24&#10;10.0.0.0/8"></textarea>
                            </div>
                            <div class="form-group">
                                <label>Password Complexity</label>
                                <select id="passwordComplexity">
                                    <option value="basic">Basic (8+ chars)</option>
                                    <option value="medium" selected>Medium (8+ chars, mixed case, numbers)</option>
                                    <option value="strong">Strong (12+ chars, mixed case, numbers, symbols)</option>
                                </select>
                            </div>
                            <button class="btn btn-danger" onclick="saveSecuritySettings()">Update Security</button>
                        </div>
                    </div>

                    <!-- External Integrations -->
                    <div class="card">
                        <div class="card-header">
                            <h3 class="card-title">External Service Configuration</h3>
                        </div>
                        
                        <div class="form-grid">
                            <div class="form-group">
                                <label>Stripe API Key</label>
                                <input type="password" id="stripeApiKey" placeholder="sk_live_...">
                            </div>
                            <div class="form-group">
                                <label>Stripe Webhook Secret</label>
                                <input type="password" id="stripeWebhookSecret" placeholder="whsec_...">
                            </div>
                            <div class="form-group">
                                <label>Email Service Provider</label>
                                <select id="emailProvider">
                                    <option value="resend">Resend</option>
                                    <option value="sendgrid">SendGrid</option>
                                    <option value="mailgun">Mailgun</option>
                                </select>
                            </div>
                            <div class="form-group">
                                <label>SMS Gateway</label>
                                <select id="smsGateway">
                                    <option value="twilio">Twilio</option>
                                    <option value="vonage">Vonage</option>
                                </select>
                            </div>
                        </div>
                        
                        <button class="btn btn-warning" onclick="testIntegrations()">Test All Integrations</button>
                        <button class="btn btn-success" onclick="saveIntegrations()">Save Integrations</button>
                    </div>
                </div>

                <!-- Global Leaderboard -->
                <div id="leaderboard" class="page-section">
                    <!-- Leaderboard Stats -->
                    <div class="stats-grid">
                        <div class="stat-card">
                            <div class="stat-icon" style="background: rgba(102,126,234,0.1); color: var(--primary);">🏆</div>
                            <div class="stat-value" id="topPerformer">Loading...</div>
                            <div class="stat-label">Top Performer</div>
                            <div class="stat-change positive" id="topPerformerValue">$0 revenue</div>
                        </div>
                        
                        <div class="stat-card">
                            <div class="stat-icon" style="background: rgba(72,187,120,0.1); color: var(--success);">🎯</div>
                            <div class="stat-value" id="totalCompetitions">0</div>
                            <div class="stat-label">Active Competitions</div>
                            <div class="stat-change" id="competitionsChange">This month</div>
                        </div>
                        
                        <div class="stat-card">
                            <div class="stat-icon" style="background: rgba(237,137,54,0.1); color: var(--warning);">🏅</div>
                            <div class="stat-value" id="badgesAwarded">0</div>
                            <div class="stat-label">Badges Awarded</div>
                            <div class="stat-change positive" id="badgesChange">This quarter</div>
                        </div>
                        
                        <div class="stat-card">
                            <div class="stat-icon" style="background: rgba(245,101,101,0.1); color: var(--danger);">💎</div>
                            <div class="stat-value" id="milestoneAchievers">0</div>
                            <div class="stat-label">Milestone Achievers</div>
                            <div class="stat-change positive" id="milestonesChange">Recent achievements</div>
                        </div>
                    </div>

                    <!-- Leaderboards -->
                    <div class="form-grid">
                        <div class="card">
                            <h3 class="card-title">🏢 Top Agencies</h3>
                            <div id="agencyLeaderboard">
                                <div style="text-align: center; padding: 2rem; color: var(--gray-500);">Loading agency leaderboard...</div>
                            </div>
                        </div>
                        
                        <div class="card">
                            <h3 class="card-title">👤 Top Agents</h3>
                            <div id="agentLeaderboard">
                                <div style="text-align: center; padding: 2rem; color: var(--gray-500);">Loading agent leaderboard...</div>
                            </div>
                        </div>
                    </div>

                    <!-- Gamification Management -->
                    <div class="card">
                        <div class="card-header">
                            <h3 class="card-title">Gamification Management</h3>
                            <div>
                                <button class="btn btn-success" onclick="createCompetition()">🏆 Create Competition</button>
                                <button class="btn btn-info" onclick="manageBadges()">🏅 Manage Badges</button>
                            </div>
                        </div>
                        
                        <div class="form-grid">
                            <div class="form-group">
                                <label>Competition Type</label>
                                <select id="competitionType">
                                    <option value="monthly">Monthly Challenge</option>
                                    <option value="quarterly">Quarterly Competition</option>
                                    <option value="annual">Annual Championship</option>
                                </select>
                            </div>
                            <div class="form-group">
                                <label>Prize Pool ($)</label>
                                <input type="number" id="prizePool" value="5000">
                            </div>
                        </div>
                        
                        <div id="competitionResults">
                            <div style="text-align: center; padding: 2rem; color: var(--gray-500);">Competition management panel will load here...</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Modals will be added here -->
    <div id="modalContainer"></div>

    <script>
        // Global variables
        let websocket = null;
        let refreshInterval = null;
        let currentPage = 'dashboard';
        const token = localStorage.getItem('syncedup_token');
        const user = JSON.parse(localStorage.getItem('syncedup_user') || '{}');

        // Check authentication
        (function() {
          const normalize = r => ({'super-admin':'super_admin','customer-service':'customer_service'}[r] || r);
          const role = normalize(user.role || '');
          const allowed = ['super_admin'];

          if (!token || !role) { window.location.href = '/login'; return; }
          if (!allowed.includes(role)) { window.location.href = '/login'; return; }
        })();

        // Initialize on load
        document.addEventListener('DOMContentLoaded', function() {
            initializePortal();
            connectWebSocket();
            startAutoRefresh();
            loadInitialData();
        });

        function initializePortal() {
            console.log('Super Admin Portal initialized');
            updateTimestamp();
        }

        // Navigation
        function showPage(pageId) {
            // Update active nav item
            document.querySelectorAll('.nav-item').forEach(item => item.classList.remove('active'));
            event.target.classList.add('active');
            
            // Hide all pages
            document.querySelectorAll('.page-section').forEach(section => section.classList.remove('active'));
            
            // Show selected page
            document.getElementById(pageId).classList.add('active');
            
            // Update page title and subtitle
            const pageInfo = {
                dashboard: { title: 'Enhanced Dashboard', subtitle: 'Real-time business metrics and insights' },
                analytics: { title: 'System Analytics', subtitle: 'Server performance and system monitoring' },
                agencies: { title: 'Agency Management', subtitle: 'Manage agencies and performance analytics' },
                revenue: { title: 'Revenue Management', subtitle: 'Financial analytics and billing operations' },
                users: { title: 'User Administration', subtitle: 'User management and access control' },
                system: { title: 'System Settings', subtitle: 'Platform configuration and integrations' },
                leaderboard: { title: 'Global Leaderboard', subtitle: 'Gamification and performance rankings' }
            };
            
            document.getElementById('pageTitle').textContent = pageInfo[pageId].title;
            document.getElementById('pageSubtitle').textContent = pageInfo[pageId].subtitle;
            
            currentPage = pageId;
            
            // Load page-specific data
            loadPageData(pageId);
        }

        // WebSocket connection for real-time updates
        function connectWebSocket() {
            // Note: This would connect to a real WebSocket server in production
            console.log('WebSocket connection established (simulated)');
            
            // Simulate real-time updates
            simulateRealTimeUpdates();
        }

        function simulateRealTimeUpdates() {
            setInterval(() => {
                updateRealTimeMetrics();
                updateTimestamp();
            }, 5000); // Update every 5 seconds
        }

        function updateRealTimeMetrics() {
            // Simulate changing metrics
            const apiCalls = Math.floor(Math.random() * 1000) + 500;
            const responseTime = Math.floor(Math.random() * 50) + 25;
            
            document.getElementById('apiCalls').textContent = apiCalls.toLocaleString();
            document.getElementById('apiChange').textContent = `Avg response: ${responseTime}ms`;
            
            // Update system metrics
            const cpuUsage = Math.floor(Math.random() * 30) + 20;
            const memoryUsage = Math.floor(Math.random() * 40) + 30;
            
            document.getElementById('cpuUsage').textContent = `${cpuUsage}%`;
            document.getElementById('memoryUsage').textContent = `${memoryUsage}%`;
            document.getElementById('memoryChange').textContent = `Available: ${(16 - (memoryUsage * 16 / 100)).toFixed(1)}GB`;
        }

        function updateTimestamp() {
            const now = new Date();
            document.getElementById('lastUpdate').textContent = now.toLocaleTimeString();
        }

        // Auto-refresh functionality
        function startAutoRefresh() {
            refreshInterval = setInterval(() => {
                if (currentPage === 'dashboard') {
                    loadDashboardData();
                }
            }, 30000); // Refresh every 30 seconds
        }

        function refreshAllData() {
            const refreshBtn = document.getElementById('refreshBtn');
            refreshBtn.innerHTML = '<div class="loading"></div> Refreshing...';
            
            setTimeout(() => {
                loadPageData(currentPage);
                refreshBtn.innerHTML = '🔄 Refresh';
                showAlert('Data refreshed successfully!', 'success');
            }, 1000);
        }

        // Load initial data
        async function loadInitialData() {
            await loadDashboardData();
            initializeCharts();
        }

        // Dashboard data loading
        async function loadDashboardData() {
            try {
                // Load basic stats
                await loadBasicStats();
                
                // Load revenue data
                await loadRevenueData();
                
                // Load system events
                await loadSystemEvents();
                
            } catch (error) {
                console.error('Error loading dashboard data:', error);
                showAlert('Error loading dashboard data', 'error');
            }
        }

        async function loadBasicStats() {
            try {
                const response = await fetch('/api/super-admin/system-stats', {
                    headers: { 'Authorization': `Bearer ${token}` }
                });
                
                if (response.ok) {
                    const data = await response.json();
                    
                    // Update dashboard stats
                    document.getElementById('totalRevenue').textContent = `$${(data.totalRevenue || 0).toLocaleString()}`;
                    document.getElementById('activeAgencies').textContent = data.activeAgencies || 0;
                    document.getElementById('totalUsers').textContent = data.totalUsers || 0;
                    document.getElementById('revenueChange').textContent = `+${data.revenueGrowth || 0}% from last month`;
                    document.getElementById('agenciesChange').textContent = `+${data.newAgencies || 0} this month`;
                    document.getElementById('usersChange').textContent = `${data.activeUserPercent || 0}% active today`;
                    
                } else {
                    throw new Error('Failed to load stats');
                }
            } catch (error) {
                console.error('Error loading basic stats:', error);
                // Set default values
                document.getElementById('totalRevenue').textContent = '$125,000';
                document.getElementById('activeAgencies').textContent = '8';
                document.getElementById('totalUsers').textContent = '245';
                document.getElementById('revenueChange').textContent = '+12% from last month';
                document.getElementById('agenciesChange').textContent = '+2 this month';
                document.getElementById('usersChange').textContent = '78% active today';
            }
        }

        async function loadRevenueData() {
            // Simulate revenue data
            const revenueData = generateSampleRevenueData();
            updateRevenueChart();
        }

        async function loadSystemEvents() {
            const eventsHtml = `
                <div style="max-height: 300px; overflow-y: auto;">
                    <div style="padding: 0.75rem; border-bottom: 1px solid var(--gray-200); display: flex; justify-content: space-between; align-items: center;">
                        <div>
                            <div style="font-weight: 500;">New agency registration</div>
                            <div style="font-size: 0.85rem; color: var(--gray-500);">Premium Insurance Solutions signed up</div>
                        </div>
                        <div style="font-size: 0.8rem; color: var(--success);">2 min ago</div>
                    </div>
                    <div style="padding: 0.75rem; border-bottom: 1px solid var(--gray-200); display: flex; justify-content: space-between; align-items: center;">
                        <div>
                            <div style="font-weight: 500;">Payment processed</div>
                            <div style="font-size: 0.85rem; color: var(--gray-500);">$2,999 from Enterprise plan renewal</div>
                        </div>
                        <div style="font-size: 0.8rem; color: var(--info);">5 min ago</div>
                    </div>
                    <div style="padding: 0.75rem; border-bottom: 1px solid var(--gray-200); display: flex; justify-content: space-between; align-items: center;">
                        <div>
                            <div style="font-weight: 500;">System backup completed</div>
                            <div style="font-size: 0.85rem; color: var(--gray-500);">Daily backup successful - 2.3GB</div>
                        </div>
                        <div style="font-size: 0.8rem; color: var(--success);">1 hour ago</div>
                    </div>
                    <div style="padding: 0.75rem; border-bottom: 1px solid var(--gray-200); display: flex; justify-content: space-between; align-items: center;">
                        <div>
                            <div style="font-weight: 500;">Alert: High CPU usage</div>
                            <div style="font-size: 0.85rem; color: var(--gray-500);">Server load peaked at 85% for 5 minutes</div>
                        </div>
                        <div style="font-size: 0.8rem; color: var(--warning);">2 hours ago</div>
                    </div>
                    <div style="padding: 0.75rem; display: flex; justify-content: space-between; align-items: center;">
                        <div>
                            <div style="font-weight: 500;">User milestone reached</div>
                            <div style="font-size: 0.85rem; color: var(--gray-500);">Sarah Johnson hit $10K commission milestone</div>
                        </div>
                        <div style="font-size: 0.8rem; color: var(--success);">3 hours ago</div>
                    </div>
                </div>
            `;
            document.getElementById('recentEvents').innerHTML = eventsHtml;
        }

        // Page-specific data loading
        async function loadPageData(pageId) {
            switch(pageId) {
                case 'dashboard':
                    await loadDashboardData();
                    break;
                case 'analytics':
                    await loadAnalyticsData();
                    break;
                case 'agencies':
                    await loadAgencyData();
                    break;
                case 'revenue':
                    await loadRevenueManagementData();
                    break;
                case 'users':
                    await loadUserData();
                    break;
                case 'system':
                    await loadSystemSettings();
                    break;
                case 'leaderboard':
                    await loadLeaderboardData();
                    break;
            }
        }

        async function loadAnalyticsData() {
            // Load system analytics
            updateSystemMetrics();
            initializeAnalyticsCharts();
            loadSystemAlerts();
        }

        function updateSystemMetrics() {
            // Simulate system metrics
            document.getElementById('cpuUsage').textContent = '45%';
            document.getElementById('cpuChange').textContent = 'Current load';
            document.getElementById('memoryUsage').textContent = '62%';
            document.getElementById('memoryChange').textContent = 'Available: 6.1GB';
            document.getElementById('dbConnections').textContent = '23';
            document.getElementById('dbChange').textContent = 'Pool: 23/100';
            document.getElementById('errorRate').textContent = '0.2%';
            document.getElementById('errorChange').textContent = 'Last 24h';
        }

        async function loadSystemAlerts() {
            const alertsHtml = `
                <div style="max-height: 400px; overflow-y: auto;">
                    <div style="padding: 1rem; border-left: 4px solid var(--warning); background: rgba(237,137,54,0.1); margin-bottom: 0.5rem;">
                        <div style="display: flex; justify-content: space-between; align-items: start;">
                            <div>
                                <div style="font-weight: 600; color: var(--warning);">⚠️ High Memory Usage</div>
                                <div style="font-size: 0.9rem; margin-top: 0.25rem;">Memory usage has exceeded 80% threshold on server-01</div>
                            </div>
                            <div style="font-size: 0.8rem; color: var(--gray-500);">5 min ago</div>
                        </div>
                    </div>
                    <div style="padding: 1rem; border-left: 4px solid var(--danger); background: rgba(245,101,101,0.1); margin-bottom: 0.5rem;">
                        <div style="display: flex; justify-content: space-between; align-items: start;">
                            <div>
                                <div style="font-weight: 600; color: var(--danger);">🚨 Failed Login Attempts</div>
                                <div style="font-size: 0.9rem; margin-top: 0.25rem;">15 failed login attempts from IP: 192.168.1.100</div>
                            </div>
                            <div style="font-size: 0.8rem; color: var(--gray-500);">12 min ago</div>
                        </div>
                    </div>
                    <div style="padding: 1rem; border-left: 4px solid var(--info); background: rgba(66,153,225,0.1); margin-bottom: 0.5rem;">
                        <div style="display: flex; justify-content: space-between; align-items: start;">
                            <div>
                                <div style="font-weight: 600; color: var(--info);">ℹ️ Database Backup Started</div>
                                <div style="font-size: 0.9rem; margin-top: 0.25rem;">Automated daily backup process has begun</div>
                            </div>
                            <div style="font-size: 0.8rem; color: var(--gray-500);">1 hour ago</div>
                        </div>
                    </div>
                </div>
            `;
            document.getElementById('systemAlerts').innerHTML = alertsHtml;
        }

        async function loadAgencyData() {
            // Update agency stats
            document.getElementById('topAgencyRevenue').textContent = '$45,000';
            document.getElementById('topAgencyName').textContent = 'Elite Insurance Group';
            document.getElementById('avgRevenuePerAgency').textContent = '$15,625';
            document.getElementById('avgRevenueChange').textContent = 'Per month';
            document.getElementById('agenciesBelowTarget').textContent = '2';
            document.getElementById('belowTargetPercent').textContent = '25% of agencies';
            document.getElementById('churnRisk').textContent = '1';
            document.getElementById('churnRiskPercent').textContent = 'High risk agencies';

            // Load agencies table
            await loadAgenciesTable();
        }

        async function loadAgenciesTable() {
            const tableHtml = `
                <tr>
                    <td>
                        <div style="font-weight: 600;">Elite Insurance Group</div>
                        <div style="font-size: 0.85rem; color: var(--gray-500);">Premium tier agency</div>
                    </td>
                    <td>
                        <div style="display: flex; align-items: center; gap: 0.5rem;">
                            <div style="width: 100px; height: 8px; background: var(--gray-200); border-radius: 4px;">
                                <div style="width: 90%; height: 100%; background: var(--success); border-radius: 4px;"></div>
                            </div>
                            <span style="font-size: 0.85rem; font-weight: 500;">90%</span>
                        </div>
                    </td>
                    <td style="font-weight: 600; color: var(--success);">$45,000</td>
                    <td>
                        <div>👥 25 users</div>
                        <div style="font-size: 0.8rem; color: var(--gray-500);">18 active</div>
                    </td>
                    <td><span class="status-active">Active</span></td>
                    <td>
                        <button class="btn btn-sm btn-primary" onclick="viewAgencyDetails('elite')">View</button>
                        <button class="btn btn-sm btn-warning" onclick="editAgency('elite')">Edit</button>
                    </td>
                </tr>
                <tr>
                    <td>
                        <div style="font-weight: 600;">Metro Insurance Solutions</div>
                        <div style="font-size: 0.85rem; color: var(--gray-500);">Professional tier agency</div>
                    </td>
                    <td>
                        <div style="display: flex; align-items: center; gap: 0.5rem;">
                            <div style="width: 100px; height: 8px; background: var(--gray-200); border-radius: 4px;">
                                <div style="width: 75%; height: 100%; background: var(--warning); border-radius: 4px;"></div>
                            </div>
                            <span style="font-size: 0.85rem; font-weight: 500;">75%</span>
                        </div>
                    </td>
                    <td style="font-weight: 600; color: var(--success);">$28,000</td>
                    <td>
                        <div>👥 18 users</div>
                        <div style="font-size: 0.8rem; color: var(--gray-500);">12 active</div>
                    </td>
                    <td><span class="status-active">Active</span></td>
                    <td>
                        <button class="btn btn-sm btn-primary" onclick="viewAgencyDetails('metro')">View</button>
                        <button class="btn btn-sm btn-warning" onclick="editAgency('metro')">Edit</button>
                    </td>
                </tr>
            `;
            document.getElementById('agenciesTable').innerHTML = tableHtml;
        }

        async function loadRevenueManagementData() {
            // Update financial KPIs
            document.getElementById('mrr').textContent = '$125,000';
            document.getElementById('mrrChange').textContent = '+15% this month';
            document.getElementById('arr').textContent = '$1.5M';
            document.getElementById('arrChange').textContent = 'Projected growth';
            document.getElementById('ltv').textContent = '$12,500';
            document.getElementById('ltvChange').textContent = 'Average lifetime value';
            document.getElementById('cac').textContent = '$850';
            document.getElementById('cacChange').textContent = 'LTV:CAC ratio 14.7:1';

            // Update billing overview
            document.getElementById('upcomingRenewals').textContent = '12';
            document.getElementById('failedPayments').textContent = '3';

            // Initialize forecast chart
            initializeForecastChart();
        }

        async function loadUserData() {
            // Update user metrics
            document.getElementById('totalUsersCount').textContent = '245';
            document.getElementById('totalUsersChange').textContent = 'All roles';
            document.getElementById('activeUsersDaily').textContent = '189';
            document.getElementById('dauChange').textContent = '+12% from yesterday';
            document.getElementById('userGrowthRate').textContent = '18%';
            document.getElementById('growthChange').textContent = 'Monthly growth';
            document.getElementById('lockedAccounts').textContent = '2';
            document.getElementById('lockedChange').textContent = 'Requires attention';

            // Load users table
            await loadUsersTable();
        }

        async function loadUsersTable() {
            const tableHtml = `
                <tr>
                    <td>
                        <div style="font-weight: 600;">John Smith</div>
                        <div style="font-size: 0.85rem; color: var(--gray-500);">john.smith@elite-insurance.com</div>
                    </td>
                    <td><span class="badge badge-success">Admin</span></td>
                    <td>Elite Insurance Group</td>
                    <td>2 hours ago</td>
                    <td><span class="status-active">Active</span></td>
                    <td>
                        <button class="btn btn-sm btn-primary" onclick="impersonateUser('john')">Impersonate</button>
                        <button class="btn btn-sm btn-warning" onclick="resetUserPassword('john')">Reset PW</button>
                    </td>
                </tr>
                <tr>
                    <td>
                        <div style="font-weight: 600;">Sarah Johnson</div>
                        <div style="font-size: 0.85rem; color: var(--gray-500);">sarah.j@metro-insurance.com</div>
                    </td>
                    <td><span class="badge badge-info">Agent</span></td>
                    <td>Metro Insurance Solutions</td>
                    <td>15 minutes ago</td>
                    <td><span class="status-active">Active</span></td>
                    <td>
                        <button class="btn btn-sm btn-primary" onclick="impersonateUser('sarah')">Impersonate</button>
                        <button class="btn btn-sm btn-warning" onclick="resetUserPassword('sarah')">Reset PW</button>
                    </td>
                </tr>
            `;
            document.getElementById('usersTable').innerHTML = tableHtml;
        }

        async function loadSystemSettings() {
            // Load current system settings
            console.log('Loading system settings...');
        }

        async function loadLeaderboardData() {
            // Update leaderboard stats
            document.getElementById('topPerformer').textContent = 'Sarah Johnson';
            document.getElementById('topPerformerValue').textContent = '$45K revenue';
            document.getElementById('totalCompetitions').textContent = '3';
            document.getElementById('competitionsChange').textContent = 'This month';
            document.getElementById('badgesAwarded').textContent = '28';
            document.getElementById('badgesChange').textContent = 'This quarter';
            document.getElementById('milestoneAchievers').textContent = '7';
            document.getElementById('milestonesChange').textContent = 'Recent achievements';

            // Load leaderboards
            loadAgencyLeaderboard();
            loadAgentLeaderboard();
        }

        function loadAgencyLeaderboard() {
            const leaderboardHtml = `
                <div class="leaderboard-item">
                    <div class="leaderboard-rank">🥇</div>
                    <div class="leaderboard-info">
                        <div style="font-weight: 600;">Elite Insurance Group</div>
                        <div style="font-size: 0.85rem; color: var(--gray-500);">15% growth this quarter</div>
                    </div>
                    <div class="leaderboard-value">$45,000</div>
                </div>
                <div class="leaderboard-item">
                    <div class="leaderboard-rank">🥈</div>
                    <div class="leaderboard-info">
                        <div style="font-weight: 600;">Metro Insurance Solutions</div>
                        <div style="font-size: 0.85rem; color: var(--gray-500);">12% growth this quarter</div>
                    </div>
                    <div class="leaderboard-value">$28,000</div>
                </div>
                <div class="leaderboard-item">
                    <div class="leaderboard-rank">🥉</div>
                    <div class="leaderboard-info">
                        <div style="font-weight: 600;">Premier Coverage Inc</div>
                        <div style="font-size: 0.85rem; color: var(--gray-500);">8% growth this quarter</div>
                    </div>
                    <div class="leaderboard-value">$22,000</div>
                </div>
            `;
            document.getElementById('agencyLeaderboard').innerHTML = leaderboardHtml;
        }

        function loadAgentLeaderboard() {
            const leaderboardHtml = `
                <div class="leaderboard-item">
                    <div class="leaderboard-rank">🥇</div>
                    <div class="leaderboard-info">
                        <div style="font-weight: 600;">Sarah Johnson</div>
                        <div style="font-size: 0.85rem; color: var(--gray-500);">Metro Insurance Solutions</div>
                    </div>
                    <div class="leaderboard-value">$12,500</div>
                </div>
                <div class="leaderboard-item">
                    <div class="leaderboard-rank">🥈</div>
                    <div class="leaderboard-info">
                        <div style="font-weight: 600;">Mike Chen</div>
                        <div style="font-size: 0.85rem; color: var(--gray-500);">Elite Insurance Group</div>
                    </div>
                    <div class="leaderboard-value">$11,200</div>
                </div>
                <div class="leaderboard-item">
                    <div class="leaderboard-rank">🥉</div>
                    <div class="leaderboard-info">
                        <div style="font-weight: 600;">Lisa Wang</div>
                        <div style="font-size: 0.85rem; color: var(--gray-500);">Premier Coverage Inc</div>
                    </div>
                    <div class="leaderboard-value">$9,800</div>
                </div>
            `;
            document.getElementById('agentLeaderboard').innerHTML = leaderboardHtml;
        }

        // Chart initialization
        function initializeCharts() {
            updateRevenueChart();
            initializePerformanceChart();
            initializeActivityChart();
        }

        function updateRevenueChart() {
            const ctx = document.getElementById('revenueChart').getContext('2d');
            
            const revenueChart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
                    datasets: [{
                        label: 'Monthly Revenue',
                        data: [85000, 92000, 78000, 105000, 115000, 120000, 125000, 118000, 130000, 125000, 135000, 142000],
                        borderColor: 'rgba(102, 126, 234, 1)',
                        backgroundColor: 'rgba(102, 126, 234, 0.1)',
                        fill: true,
                        tension: 0.4
                    }, {
                        label: 'Projected',
                        data: [null, null, null, null, null, null, null, null, null, 125000, 135000, 145000],
                        borderColor: 'rgba(237, 137, 54, 1)',
                        backgroundColor: 'rgba(237, 137, 54, 0.1)',
                        borderDash: [5, 5],
                        fill: false,
                        tension: 0.4
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'top',
                        },
                        title: {
                            display: false
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: false,
                            ticks: {
                                callback: function(value) {
                                    return '$' + value.toLocaleString();
                                }
                            }
                        }
                    }
                }
            });
        }

        function initializePerformanceChart() {
            const ctx = document.getElementById('performanceChart').getContext('2d');
            
            const performanceChart = new Chart(ctx, {
                type: 'doughnut',
                data: {
                    labels: ['CPU Usage', 'Memory Usage', 'Disk Usage'],
                    datasets: [{
                        data: [45, 62, 38],
                        backgroundColor: [
                            'rgba(102, 126, 234, 0.8)',
                            'rgba(237, 137, 54, 0.8)',
                            'rgba(72, 187, 120, 0.8)'
                        ],
                        borderWidth: 2,
                        borderColor: '#fff'
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'bottom',
                        }
                    }
                }
            });
        }

        function initializeActivityChart() {
            const ctx = document.getElementById('activityChart').getContext('2d');
            
            const activityChart = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'],
                    datasets: [{
                        label: 'Active Users',
                        data: [189, 165, 178, 198, 210, 145, 132],
                        backgroundColor: 'rgba(72, 187, 120, 0.8)',
                        borderColor: 'rgba(72, 187, 120, 1)',
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            display: false
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            });
        }

        function initializeAnalyticsCharts() {
            initializeResponseTimeChart();
            initializeEndpointChart();
        }

        function initializeResponseTimeChart() {
            const ctx = document.getElementById('responseTimeChart').getContext('2d');
            
            const responseTimeChart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: ['00:00', '04:00', '08:00', '12:00', '16:00', '20:00'],
                    datasets: [{
                        label: 'Response Time (ms)',
                        data: [45, 38, 52, 67, 58, 42],
                        borderColor: 'rgba(66, 153, 225, 1)',
                        backgroundColor: 'rgba(66, 153, 225, 0.1)',
                        fill: true,
                        tension: 0.4
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'top',
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: true,
                            ticks: {
                                callback: function(value) {
                                    return value + 'ms';
                                }
                            }
                        }
                    }
                }
            });
        }

        function initializeEndpointChart() {
            const ctx = document.getElementById('endpointChart').getContext('2d');
            
            const endpointChart = new Chart(ctx, {
                type: 'horizontalBar',
                data: {
                    labels: ['/api/auth/login', '/api/leads', '/api/dashboard', '/api/commissions', '/api/sales'],
                    datasets: [{
                        label: 'Requests per Hour',
                        data: [1250, 890, 675, 445, 380],
                        backgroundColor: [
                            'rgba(102, 126, 234, 0.8)',
                            'rgba(72, 187, 120, 0.8)',
                            'rgba(237, 137, 54, 0.8)',
                            'rgba(245, 101, 101, 0.8)',
                            'rgba(159, 122, 234, 0.8)'
                        ],
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            display: false
                        }
                    },
                    scales: {
                        x: {
                            beginAtZero: true
                        }
                    }
                }
            });
        }

        function initializeForecastChart() {
            const ctx = document.getElementById('forecastChart').getContext('2d');
            
            const forecastChart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: ['Oct', 'Nov', 'Dec', 'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun'],
                    datasets: [{
                        label: 'Actual Revenue',
                        data: [125000, 135000, 142000, null, null, null, null, null, null],
                        borderColor: 'rgba(72, 187, 120, 1)',
                        backgroundColor: 'rgba(72, 187, 120, 0.1)',
                        fill: true
                    }, {
                        label: 'Conservative Forecast',
                        data: [null, null, 142000, 148000, 155000, 162000, 168000, 175000, 182000],
                        borderColor: 'rgba(102, 126, 234, 1)',
                        backgroundColor: 'rgba(102, 126, 234, 0.1)',
                        borderDash: [5, 5],
                        fill: false
                    }, {
                        label: 'Optimistic Forecast',
                        data: [null, null, 142000, 155000, 168000, 185000, 198000, 215000, 235000],
                        borderColor: 'rgba(237, 137, 54, 1)',
                        backgroundColor: 'rgba(237, 137, 54, 0.1)',
                        borderDash: [2, 2],
                        fill: false
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'top',
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: false,
                            ticks: {
                                callback: function(value) {
                                    return '$' + (value / 1000) + 'K';
                                }
                            }
                        }
                    }
                }
            });
        }

        // Utility functions
        function showAlert(message, type = 'info') {
            // Create and show alert
            const alertDiv = document.createElement('div');
            alertDiv.className = `alert alert-${type} show`;
            alertDiv.textContent = message;
            
            // Insert at top of current page
            const currentPageElement = document.querySelector('.page-section.active');
            currentPageElement.insertBefore(alertDiv, currentPageElement.firstChild);
            
            // Auto-hide after 3 seconds
            setTimeout(() => {
                alertDiv.classList.remove('show');
                setTimeout(() => alertDiv.remove(), 300);
            }, 3000);
        }

        function generateSampleRevenueData() {
            // Generate sample data for demo
            return {
                monthly: [85000, 92000, 78000, 105000, 115000, 120000, 125000, 118000, 130000, 125000, 135000, 142000],
                labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']
            };
        }

        // Action handlers
        function filterAgencies() {
            // Agency filtering logic
            console.log('Filtering agencies...');
        }

        function filterUsers() {
            // User filtering logic
            console.log('Filtering users...');
        }

        function clearAlerts() {
            document.getElementById('systemAlerts').innerHTML = '<div style="text-align: center; padding: 2rem; color: var(--gray-500);">All alerts cleared.</div>';
            showAlert('System alerts cleared', 'success');
        }

        function loadSystemAlerts() {
            loadSystemAlerts();
            showAlert('System alerts refreshed', 'info');
        }

        // Modal functions
        function showCreateAgencyModal() {
            showAlert('Create agency modal would open here', 'info');
        }

        function showCreateUserModal() {
            showAlert('Create user modal would open here', 'info');
        }

        // Management actions
        function viewAgencyDetails(agencyId) {
            showAlert(`Viewing details for agency: ${agencyId}`, 'info');
        }

        function editAgency(agencyId) {
            showAlert(`Editing agency: ${agencyId}`, 'info');
        }

        function impersonateUser(userId) {
            if (confirm('Are you sure you want to impersonate this user?')) {
                showAlert(`Impersonating user: ${userId}`, 'warning');
            }
        }

        function resetUserPassword(userId) {
            if (confirm('Reset password for this user?')) {
                showAlert(`Password reset for user: ${userId}`, 'success');
            }
        }

        // System settings actions
        function toggleMaintenance() {
            const isEnabled = document.getElementById('maintenanceMode').checked;
            showAlert(`Maintenance mode ${isEnabled ? 'enabled' : 'disabled'}`, isEnabled ? 'warning' : 'success');
        }

        function toggle2FA() {
            const isEnabled = document.getElementById('enforce2FA').checked;
            showAlert(`2FA enforcement ${isEnabled ? 'enabled' : 'disabled'}`, 'info');
        }

        function updateRateLimit() {
            const limit = document.getElementById('apiRateLimit').value;
            showAlert(`API rate limit updated to ${limit} requests/hour`, 'success');
        }

        function updateSessionTimeout() {
            const timeout = document.getElementById('sessionTimeout').value;
            showAlert(`Session timeout updated to ${timeout} minutes`, 'success');
        }

        function saveSystemSettings() {
            showAlert('System settings saved successfully', 'success');
        }

        function saveSecuritySettings() {
            showAlert('Security settings updated successfully', 'success');
        }

        function testIntegrations() {
            showAlert('Testing integrations...', 'info');
            setTimeout(() => {
                showAlert('All integrations tested successfully', 'success');
            }, 2000);
        }

        function saveIntegrations() {
            showAlert('Integration settings saved successfully', 'success');
        }

        // Revenue management actions
        function showRenewals() {
            showAlert('Showing upcoming renewals', 'info');
        }

        function showFailedPayments() {
            showAlert('Processing failed payments...', 'warning');
        }

        function generateFinancialReport() {
            showAlert('Generating financial report...', 'info');
        }

        function processRefunds() {
            if (confirm('Process all pending refunds?')) {
                showAlert('Processing refunds...', 'warning');
            }
        }

        function exportUserData() {
            showAlert('Exporting user data...', 'info');
        }

        // Leaderboard actions
        function createCompetition() {
            showAlert('Creating new competition...', 'info');
        }

        function manageBadges() {
            showAlert('Opening badge management...', 'info');
        }

        // Logout
        function logout() {
            if (confirm('Are you sure you want to logout?')) {
                localStorage.clear();
                window.location.href = '/login.html';
            }
        }

        // Cleanup on page unload
        window.addEventListener('beforeunload', function() {
            if (websocket) {
                websocket.close();
            }
            if (refreshInterval) {
                clearInterval(refreshInterval);
            }
        });
    </script>
</body>
</html>
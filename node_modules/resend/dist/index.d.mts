import * as React$1 from 'react';

interface GetOptions {
    query?: Record<string, unknown>;
}

interface PostOptions {
    query?: {
        [key: string]: unknown;
    };
}

interface PutOptions {
    query?: {
        [key: string]: unknown;
    };
}

type RateLimit = {
    /**
     * The maximum amount of requests that can be made in the time window of {@link shouldResetAfter}.
     */
    limit: number;
    /**
     * The amount of requests that can still be made before hitting {@link RateLimit.limit}.
     *
     * Resets after the seconds in {@link RateLimit.shouldResetAfter} go by.
     */
    remainingRequests: number;
    /**
     * The number of seconds after which the rate limiting will reset,
     * and {@link RateLimit.remainingRequests} goes back to the value of
     * {@link RateLimit.limit}.
     *
     * @see {@link import('./interfaces').Response.retryAfter}
     */
    shouldResetAfter: number;
};

declare const RESEND_ERROR_CODES_BY_KEY: {
    readonly missing_required_field: 422;
    readonly invalid_idempotency_key: 400;
    readonly invalid_idempotent_request: 409;
    readonly concurrent_idempotent_requests: 409;
    readonly invalid_access: 422;
    readonly invalid_parameter: 422;
    readonly invalid_region: 422;
    readonly rate_limit_exceeded: 429;
    readonly missing_api_key: 401;
    readonly invalid_api_Key: 403;
    readonly invalid_from_address: 403;
    readonly validation_error: 403;
    readonly not_found: 404;
    readonly method_not_allowed: 405;
    readonly application_error: 500;
    readonly internal_server_error: 500;
};
type RESEND_ERROR_CODE_KEY = keyof typeof RESEND_ERROR_CODES_BY_KEY;
type ErrorResponse = {
    message: string;
    name: Exclude<RESEND_ERROR_CODE_KEY, 'rate_limit_exceeded'>;
} | {
    message: string;
    name: Extract<RESEND_ERROR_CODE_KEY, 'rate_limit_exceeded'>;
    /**
     * Time in seconds.
     */
    retryAfter: number;
};
type Response<Data> = {
    data: Data;
    rateLimiting: RateLimit;
    error: null;
} | {
    data: null;
    rateLimiting: RateLimit | null;
    error: ErrorResponse;
};

interface CreateApiKeyOptions {
    name: string;
    permission?: 'full_access' | 'sending_access';
    domain_id?: string;
}
interface CreateApiKeyRequestOptions extends PostOptions {
}
interface CreateApiKeyResponseSuccess {
    token: string;
    id: string;
}
type CreateApiKeyResponse = Response<CreateApiKeyResponseSuccess>;

interface ApiKey {
    created_at: string;
    id: string;
    name: string;
}

type ListApiKeysResponseSuccess = Pick<ApiKey, 'name' | 'id' | 'created_at'>[];
type ListApiKeysResponse = Response<ListApiKeysResponseSuccess>;

type RemoveApiKeyResponseSuccess = {};
type RemoveApiKeyResponse = Response<RemoveApiKeyResponseSuccess>;

interface Audience {
    created_at: string;
    id: string;
    name: string;
}

interface CreateAudienceOptions {
    name: string;
}
interface CreateAudienceRequestOptions extends PostOptions {
}
interface CreateAudienceResponseSuccess extends Pick<Audience, 'name' | 'id'> {
    object: 'audience';
}
type CreateAudienceResponse = Response<CreateAudienceResponseSuccess>;

interface GetAudienceResponseSuccess extends Pick<Audience, 'id' | 'name' | 'created_at'> {
    object: 'audience';
}
type GetAudienceResponse = Response<GetAudienceResponseSuccess>;

type ListAudiencesResponseSuccess = {
    object: 'list';
    data: Audience[];
};
type ListAudiencesResponse = Response<ListAudiencesResponseSuccess>;

interface RemoveAudiencesResponseSuccess extends Pick<Audience, 'id'> {
    object: 'audience';
    deleted: boolean;
}
type RemoveAudiencesResponse = Response<RemoveAudiencesResponseSuccess>;

interface IdempotentRequest {
    /**
     * Unique key that ensures the same operation is not processed multiple times.
     * Allows for safe retries without duplicating operations.
     * If provided, will be sent as the `Idempotency-Key` header.
     */
    idempotencyKey?: string;
}

type RequireAtLeastOne<T> = {
    [K in keyof T]-?: Required<Pick<T, K>> & Partial<Pick<T, Exclude<keyof T, K>>>;
}[keyof T];

interface EmailRenderOptions$1 {
    /**
     * The React component used to write the message.
     *
     * @link https://resend.com/docs/api-reference/emails/send-email#body-parameters
     */
    react: React$1.ReactNode;
    /**
     * The HTML version of the message.
     *
     * @link https://resend.com/docs/api-reference/emails/send-email#body-parameters
     */
    html: string;
    /**
     * The plain text version of the message.
     *
     * @link https://resend.com/docs/api-reference/emails/send-email#body-parameters
     */
    text: string;
}
interface CreateEmailBaseOptions {
    /**
     * Filename and content of attachments (max 40mb per email)
     *
     * @link https://resend.com/docs/api-reference/emails/send-email#body-parameters
     */
    attachments?: Attachment[];
    /**
     * Blind carbon copy recipient email address. For multiple addresses, send as an array of strings.
     *
     * @link https://resend.com/docs/api-reference/emails/send-email#body-parameters
     */
    bcc?: string | string[];
    /**
     * Carbon copy recipient email address. For multiple addresses, send as an array of strings.
     *
     * @link https://resend.com/docs/api-reference/emails/send-email#body-parameters
     */
    cc?: string | string[];
    /**
     * Sender email address. To include a friendly name, use the format `"Your Name <sender@domain.com>"`
     *
     * @link https://resend.com/docs/api-reference/emails/send-email#body-parameters
     */
    from: string;
    /**
     * Custom headers to add to the email.
     *
     * @link https://resend.com/docs/api-reference/emails/send-email#body-parameters
     */
    headers?: Record<string, string>;
    /**
     * Reply-to email address. For multiple addresses, send as an array of strings.
     *
     * @link https://resend.com/docs/api-reference/emails/send-email#body-parameters
     */
    replyTo?: string | string[];
    /**
     * Email subject.
     *
     * @link https://resend.com/docs/api-reference/emails/send-email#body-parameters
     */
    subject: string;
    /**
     * Email tags
     *
     * @link https://resend.com/docs/api-reference/emails/send-email#body-parameters
     */
    tags?: Tag[];
    /**
     * Recipient email address. For multiple addresses, send as an array of strings. Max 50.
     *
     * @link https://resend.com/docs/api-reference/emails/send-email#body-parameters
     */
    to: string | string[];
    /**
     * The id of the topic you want to send to
     *
     * @link https://resend.com/docs/api-reference/emails/send-email#body-parameters
     */
    topicId?: string | null;
    /**
     * Schedule email to be sent later.
     * The date should be in ISO 8601 format (e.g: 2024-08-05T11:52:01.858Z).
     *
     * @link https://resend.com/docs/api-reference/emails/send-email#body-parameters
     */
    scheduledAt?: string;
}
type CreateEmailOptions = RequireAtLeastOne<EmailRenderOptions$1> & CreateEmailBaseOptions;
interface CreateEmailRequestOptions extends PostOptions, IdempotentRequest {
}
interface CreateEmailResponseSuccess {
    /** The ID of the newly created email. */
    id: string;
}
type CreateEmailResponse = Response<CreateEmailResponseSuccess>;
interface Attachment {
    /** Content of an attached file. */
    content?: string | Buffer;
    /** Name of attached file. */
    filename?: string | false | undefined;
    /** Path where the attachment file is hosted */
    path?: string;
    /** Optional content type for the attachment, if not set will be derived from the filename property */
    contentType?: string;
    /**
     * Optional content ID for the attachment, to be used as a reference in the HTML content.
     * If set, this attachment will be sent as an inline attachment and you can reference it in the HTML content using the `cid:` prefix.
     */
    contentId?: string;
}
type Tag = {
    /**
     * The name of the email tag. It can only contain ASCII letters (a–z, A–Z), numbers (0–9), underscores (_), or dashes (-). It can contain no more than 256 characters.
     */
    name: string;
    /**
     * The value of the email tag. It can only contain ASCII letters (a–z, A–Z), numbers (0–9), underscores (_), or dashes (-). It can contain no more than 256 characters.
     */
    value: string;
};

type CreateBatchOptions = CreateEmailOptions[];
interface CreateBatchRequestOptions extends PostOptions, IdempotentRequest {
}
interface CreateBatchSuccessResponse {
    data: {
        /** The ID of the newly created email. */
        id: string;
    }[];
}
type CreateBatchResponse = Response<CreateBatchSuccessResponse>;

interface EmailRenderOptions {
    /**
     * The React component used to write the message.
     *
     * @link https://resend.com/docs/api-reference/broadcasts/create#body-parameters
     */
    react: React$1.ReactNode;
    /**
     * The HTML version of the message.
     *
     * @link https://resend.com/docs/api-reference/broadcasts/create#body-parameters
     */
    html: string;
    /**
     * The plain text version of the message.
     *
     * @link https://resend.com/docs/api-reference/broadcasts/create#body-parameters
     */
    text: string;
}
interface CreateBroadcastBaseOptions {
    /**
     * The name of the broadcast
     *
     * @link https://resend.com/docs/api-reference/broadcasts/create#body-parameters
     */
    name?: string;
    /**
     * The id of the audience you want to send to
     *
     * @link https://resend.com/docs/api-reference/broadcasts/create#body-parameters
     */
    audienceId: string;
    /**
     * A short snippet of text displayed as a preview in recipients' inboxes, often shown below or beside the subject line.
     *
     * @link https://resend.com/docs/api-reference/broadcasts/create#body-parameters
     */
    previewText?: string;
    /**
     * Sender email address. To include a friendly name, use the format `"Your Name <sender@domain.com>"`
     *
     * @link https://resend.com/docs/api-reference/broadcasts/create#body-parameters
     */
    from: string;
    /**
     * Reply-to email address. For multiple addresses, send as an array of strings.
     *
     * @link https://resend.com/docs/api-reference/broadcasts/create#body-parameters
     */
    replyTo?: string | string[];
    /**
     * Email subject.
     *
     * @link https://resend.com/docs/api-reference/broadcasts/create#body-parameters
     */
    subject: string;
    /**
     * The id of the topic you want to send to
     *
     * @link https://resend.com/docs/api-reference/broadcasts/create#body-parameters
     */
    topicId?: string | null;
}
type CreateBroadcastOptions = RequireAtLeastOne<EmailRenderOptions> & CreateBroadcastBaseOptions;
interface CreateBroadcastRequestOptions extends PostOptions {
}
interface CreateBroadcastResponseSuccess {
    /** The ID of the newly sent broadcasts. */
    id: string;
}
type CreateBroadcastResponse = Response<CreateBroadcastResponseSuccess>;

interface SendBroadcastBaseOptions {
    /**
     * Schedule email to be sent later.
     * The date should be in ISO 8601 format (e.g: 2024-08-05T11:52:01.858Z)
     * or relative time (eg: in 2 days).
     *
     * @link https://resend.com/docs/api-reference/broadcasts/send#body-parameters
     */
    scheduledAt?: string;
}
type SendBroadcastOptions = SendBroadcastBaseOptions;
interface SendBroadcastRequestOptions extends PostOptions {
}
interface SendBroadcastResponseSuccess {
    /** The ID of the sent broadcast. */
    id: string;
}
type SendBroadcastResponse = Response<SendBroadcastResponseSuccess>;

interface Contact {
    created_at: string;
    id: string;
    email: string;
    first_name?: string;
    last_name?: string;
    unsubscribed: boolean;
}
type SelectingField = {
    /**
     * The contact id.
     *
     * @link https://resend.com/docs/api-reference/contacts/delete-contact#body-parameters
     */
    id: string;
    /**
     * The contact email.
     *
     * @link https://resend.com/docs/api-reference/contacts/delete-contact#body-parameters
     */
    email?: undefined | null;
} | {
    /**
     * The contact id.
     *
     * @link https://resend.com/docs/api-reference/contacts/delete-contact#body-parameters
     */
    id?: undefined | null;
    /**
     * The contact email.
     *
     * @link https://resend.com/docs/api-reference/contacts/delete-contact#body-parameters
     */
    email: string;
};

interface CreateContactOptions {
    audienceId?: string;
    email: string;
    unsubscribed?: boolean;
    firstName?: string;
    lastName?: string;
}
interface CreateContactRequestOptions extends PostOptions {
}
interface CreateContactResponseSuccess extends Pick<Contact, 'id'> {
    object: 'contact';
}
type CreateContactResponse = Response<CreateContactResponseSuccess>;

type GetContactOptions = {
    audienceId?: string;
} & SelectingField;
interface GetContactResponseSuccess extends Pick<Contact, 'id' | 'email' | 'created_at' | 'first_name' | 'last_name' | 'unsubscribed'> {
    object: 'contact';
}
type GetContactResponse = Response<GetContactResponseSuccess>;

type PaginationOptions<IdType> = {
    limit?: number;
    after?: IdType;
    before?: never;
} | {
    limit?: number;
    before?: IdType;
    after?: never;
};
type PaginatedData<Data> = {
    object: 'list';
    data: Data;
    hasMore: boolean;
};
type PaginatedApiResponse<Data> = {
    object: 'list';
    data: Data;
    has_more: boolean;
};

interface ListAudienceContactsOptions {
    audienceId: string;
}
type ListContactsOptions = PaginationOptions<string>;
interface ListAudienceContactsResponseSuccess {
    object: 'list';
    data: Contact[];
}
type ListAudienceContactsResponse = Response<ListAudienceContactsResponseSuccess>;
type ListContactsApiResponseSuccess = PaginatedApiResponse<Contact[]>;
type ListContactsResponseSuccess = PaginatedData<Contact[]>;
type ListContactsResponse = Response<ListContactsResponseSuccess>;

type RemoveContactsResponseSuccess = {
    object: 'contact';
    deleted: boolean;
    contact: string;
};
type RemoveContactOptions = SelectingField & {
    audienceId?: string;
};
type RemoveContactsResponse = Response<RemoveContactsResponseSuccess>;

type UpdateContactOptions = {
    audienceId?: string;
    unsubscribed?: boolean;
    firstName?: string;
    lastName?: string;
} & SelectingField;
type UpdateContactResponseSuccess = Pick<Contact, 'id'> & {
    object: 'contact';
};
type UpdateContactResponse = Response<UpdateContactResponseSuccess>;

type DomainRegion = 'us-east-1' | 'eu-west-1' | 'sa-east-1' | 'ap-northeast-1';
type DomainStatus = 'pending' | 'verified' | 'failed' | 'temporary_failure' | 'not_started';
type DomainRecords = DomainSpfRecord | DomainDkimRecord;
interface DomainSpfRecord {
    record: 'SPF';
    name: string;
    value: string;
    type: 'MX' | 'TXT';
    ttl: string;
    status: DomainStatus;
    routing_policy?: string;
    priority?: number;
    proxy_status?: 'enable' | 'disable';
}
interface DomainDkimRecord {
    record: 'DKIM';
    name: string;
    value: string;
    type: 'CNAME' | 'TXT';
    ttl: string;
    status: DomainStatus;
    routing_policy?: string;
    priority?: number;
    proxy_status?: 'enable' | 'disable';
}
interface Domain {
    id: string;
    name: string;
    status: DomainStatus;
    created_at: string;
    region: DomainRegion;
}

interface CreateDomainOptions {
    name: string;
    region?: DomainRegion;
    customReturnPath?: string;
}
interface CreateDomainRequestOptions extends PostOptions {
}
interface CreateDomainResponseSuccess extends Pick<Domain, 'name' | 'id' | 'status' | 'created_at' | 'region'> {
    records: DomainRecords[];
}
type CreateDomainResponse = Response<CreateDomainResponseSuccess>;

interface GetDomainResponseSuccess extends Pick<Domain, 'id' | 'name' | 'created_at' | 'region' | 'status'> {
    object: 'domain';
    records: DomainRecords[];
}
type GetDomainResponse = Response<GetDomainResponseSuccess>;

type ListDomainsResponseSuccess = {
    data: Domain[];
};
type ListDomainsResponse = Response<ListDomainsResponseSuccess>;

type RemoveDomainsResponseSuccess = Pick<Domain, 'id'> & {
    object: 'domain';
    deleted: boolean;
};
type RemoveDomainsResponse = Response<RemoveDomainsResponseSuccess>;

interface UpdateDomainsOptions {
    id: string;
    clickTracking?: boolean;
    openTracking?: boolean;
    tls?: 'enforced' | 'opportunistic';
}
type UpdateDomainsResponseSuccess = Pick<Domain, 'id'> & {
    object: 'domain';
};
type UpdateDomainsResponse = Response<UpdateDomainsResponseSuccess>;

type VerifyDomainsResponseSuccess = Pick<Domain, 'id'> & {
    object: 'domain';
};
type VerifyDomainsResponse = Response<VerifyDomainsResponseSuccess>;

interface GetEmailResponseSuccess {
    bcc: string[] | null;
    cc: string[] | null;
    created_at: string;
    from: string;
    html: string | null;
    id: string;
    last_event: 'bounced' | 'canceled' | 'clicked' | 'complained' | 'delivered' | 'delivery_delayed' | 'failed' | 'opened' | 'queued' | 'scheduled' | 'sent';
    reply_to: string[] | null;
    subject: string;
    text: string | null;
    tags?: {
        name: string;
        value: string;
    }[];
    to: string[];
    topic_id?: string | null;
    scheduled_at: string | null;
    object: 'email';
}
type GetEmailResponse = Response<GetEmailResponseSuccess>;

declare class ApiKeys {
    private readonly resend;
    constructor(resend: Resend);
    create(payload: CreateApiKeyOptions, options?: CreateApiKeyRequestOptions): Promise<CreateApiKeyResponse>;
    list(): Promise<ListApiKeysResponse>;
    remove(id: string): Promise<RemoveApiKeyResponse>;
}

declare class Audiences {
    private readonly resend;
    constructor(resend: Resend);
    create(payload: CreateAudienceOptions, options?: CreateAudienceRequestOptions): Promise<CreateAudienceResponse>;
    list(): Promise<ListAudiencesResponse>;
    get(id: string): Promise<GetAudienceResponse>;
    remove(id: string): Promise<RemoveAudiencesResponse>;
}

declare class Batch {
    private readonly resend;
    private renderAsync?;
    constructor(resend: Resend);
    send(payload: CreateBatchOptions, options?: CreateBatchRequestOptions): Promise<CreateBatchResponse>;
    create(payload: CreateBatchOptions, options?: CreateBatchRequestOptions): Promise<CreateBatchResponse>;
}

interface Broadcast {
    id: string;
    name: string;
    audience_id: string | null;
    from: string | null;
    subject: string | null;
    reply_to: string[] | null;
    preview_text: string | null;
    status: 'draft' | 'sent' | 'queued';
    created_at: string;
    scheduled_at: string | null;
    sent_at: string | null;
    topic_id?: string | null;
}

interface GetBroadcastResponseSuccess extends Broadcast {
    object: 'broadcast';
}
type GetBroadcastResponse = Response<GetBroadcastResponseSuccess>;

type ListBroadcastsResponseSuccess = {
    object: 'list';
    data: Pick<Broadcast, 'id' | 'name' | 'audience_id' | 'status' | 'created_at' | 'scheduled_at' | 'sent_at'>[];
};
type ListBroadcastsResponse = Response<ListBroadcastsResponseSuccess>;

interface RemoveBroadcastResponseSuccess extends Pick<Broadcast, 'id'> {
    object: 'broadcast';
    deleted: boolean;
}
type RemoveBroadcastResponse = Response<RemoveBroadcastResponseSuccess>;

interface UpdateBroadcastResponseSuccess {
    id: string;
}
type UpdateBroadcastOptions = {
    name?: string;
    audienceId?: string;
    from?: string;
    html?: string;
    react?: React.ReactNode;
    text?: string;
    subject?: string;
    replyTo?: string[];
    previewText?: string;
    topicId?: string | null;
};
type UpdateBroadcastResponse = Response<UpdateBroadcastResponseSuccess>;

declare class Broadcasts {
    private readonly resend;
    private renderAsync?;
    constructor(resend: Resend);
    create(payload: CreateBroadcastOptions, options?: CreateBroadcastRequestOptions): Promise<SendBroadcastResponse>;
    send(id: string, payload?: SendBroadcastOptions): Promise<SendBroadcastResponse>;
    list(): Promise<ListBroadcastsResponse>;
    get(id: string): Promise<GetBroadcastResponse>;
    remove(id: string): Promise<RemoveBroadcastResponse>;
    update(id: string, payload: UpdateBroadcastOptions): Promise<UpdateBroadcastResponse>;
}

interface PatchOptions {
    query?: {
        [key: string]: unknown;
    };
}

type ContactAudiencesBaseOptions = {
    contactId: string;
    email?: never;
} | {
    contactId?: never;
    email: string;
};

type AddContactAudiencesResponse = Response<AddContactAudiencesResponseSuccess>;
interface AddContactAudiencesResponseSuccess {
    id: string;
}
type AddContactAudiencesOptions = ContactAudiencesBaseOptions & {
    audienceId: string;
};

type ListContactAudiencesOptions = PaginationOptions<string> & ContactAudiencesBaseOptions;
type ListContactAudiencesResponseSuccess = PaginatedData<Audience[]>;
type ListContactAudiencesResponse = Response<ListContactAudiencesResponseSuccess>;

type RemoveContactAudiencesResponse = Response<RemoveContactAudiencesResponseSuccess>;
interface RemoveContactAudiencesResponseSuccess {
    id: string;
    deleted: boolean;
}
type RemoveContactAudiencesOptions = ContactAudiencesBaseOptions & {
    audienceId: string;
};

declare class ContactAudiences {
    private readonly resend;
    constructor(resend: Resend);
    list(options: ListContactAudiencesOptions): Promise<ListContactAudiencesResponse>;
    add(options: AddContactAudiencesOptions): Promise<AddContactAudiencesResponse>;
    remove(options: RemoveContactAudiencesOptions): Promise<RemoveContactAudiencesResponse>;
}

interface GetContactTopicsBaseOptions {
    id?: string;
    email?: string;
}
interface GetContactTopicsOptions extends GetContactTopicsBaseOptions {
}
interface ContactTopic {
    id: string;
    name: string;
    description: string | null;
    subscription: 'opt_in' | 'opt_out';
}
interface GetContactTopicsResponseSuccess {
    email: string;
    topics: ContactTopic[];
}
interface GetContactTopicsResponse {
    data: GetContactTopicsResponseSuccess | null;
    error: ErrorResponse | null;
}

interface UpdateContactTopicsBaseOptions {
    id?: string;
    email?: string;
}
interface UpdateContactTopicsOptions extends UpdateContactTopicsBaseOptions {
    topics: {
        id: string;
        subscription: 'opt_in' | 'opt_out';
    }[];
}
interface UpdateContactTopicsResponseSuccess {
    id: string;
}
interface UpdateContactTopicsResponse {
    data: UpdateContactTopicsResponseSuccess | null;
    error: ErrorResponse | null;
}

declare class ContactTopics {
    private readonly resend;
    constructor(resend: Resend);
    update(payload: UpdateContactTopicsOptions): Promise<UpdateContactTopicsResponse>;
    get(options: GetContactTopicsOptions): Promise<GetContactTopicsResponse>;
}

declare class Contacts {
    private readonly resend;
    readonly topics: ContactTopics;
    readonly audiences: ContactAudiences;
    constructor(resend: Resend);
    create(payload: CreateContactOptions, options?: CreateContactRequestOptions): Promise<CreateContactResponse>;
    list(options: ListContactsOptions): Promise<ListContactsResponse>;
    list(options: ListAudienceContactsOptions): Promise<ListAudienceContactsResponse>;
    get(options: GetContactOptions): Promise<GetContactResponse>;
    update(options: UpdateContactOptions): Promise<UpdateContactResponse>;
    remove(payload: RemoveContactOptions): Promise<RemoveContactsResponse>;
}

declare class Domains {
    private readonly resend;
    constructor(resend: Resend);
    create(payload: CreateDomainOptions, options?: CreateDomainRequestOptions): Promise<CreateDomainResponse>;
    list(): Promise<ListDomainsResponse>;
    get(id: string): Promise<GetDomainResponse>;
    update(payload: UpdateDomainsOptions): Promise<UpdateDomainsResponse>;
    remove(id: string): Promise<RemoveDomainsResponse>;
    verify(id: string): Promise<VerifyDomainsResponse>;
}

interface CancelEmailResponseSuccess {
    object: 'email';
    id: string;
}
type CancelEmailResponse = Response<CancelEmailResponseSuccess>;

interface UpdateEmailOptions {
    id: string;
    scheduledAt: string;
}
interface UpdateEmailResponseSuccess {
    id: string;
    object: 'email';
}
type UpdateEmailResponse = Response<UpdateEmailResponseSuccess>;

declare class Emails {
    private readonly resend;
    private renderAsync?;
    constructor(resend: Resend);
    send(payload: CreateEmailOptions, options?: CreateEmailRequestOptions): Promise<CreateEmailResponse>;
    create(payload: CreateEmailOptions, options?: CreateEmailRequestOptions): Promise<CreateEmailResponse>;
    get(id: string): Promise<GetEmailResponse>;
    update(payload: UpdateEmailOptions): Promise<UpdateEmailResponse>;
    cancel(id: string): Promise<CancelEmailResponse>;
}

interface Topic {
    id: string;
    name: string;
    description?: string;
    default_subscription: 'opt_in' | 'opt_out';
    created_at: string;
}

interface CreateTopicOptions {
    name: string;
    description?: string;
    default_subscription: 'opt_in' | 'opt_out';
}
type CreateTopicResponseSuccess = Pick<Topic, 'id'>;
interface CreateTopicResponse {
    data: CreateTopicResponseSuccess | null;
    error: ErrorResponse | null;
}

type GetTopicResponseSuccess = Topic;
interface GetTopicResponse {
    data: GetTopicResponseSuccess | null;
    error: ErrorResponse | null;
}

interface ListTopicsResponseSuccess {
    data: Topic[];
}
interface ListTopicsResponse {
    data: ListTopicsResponseSuccess | null;
    error: ErrorResponse | null;
}

type RemoveTopicResponseSuccess = Pick<Topic, 'id'> & {
    object: 'topic';
    deleted: boolean;
};
interface RemoveTopicResponse {
    data: RemoveTopicResponseSuccess | null;
    error: ErrorResponse | null;
}

interface UpdateTopicOptions {
    id: string;
    name?: string;
    description?: string;
}
type UpdateTopicResponseSuccess = Pick<Topic, 'id'>;
interface UpdateTopicResponse {
    data: UpdateTopicResponseSuccess | null;
    error: ErrorResponse | null;
}

declare class Topics {
    private readonly resend;
    constructor(resend: Resend);
    create(payload: CreateTopicOptions): Promise<CreateTopicResponse>;
    list(): Promise<ListTopicsResponse>;
    get(id: string): Promise<GetTopicResponse>;
    update(payload: UpdateTopicOptions): Promise<UpdateTopicResponse>;
    remove(id: string): Promise<RemoveTopicResponse>;
}

declare class Resend {
    readonly key?: string | undefined;
    private readonly headers;
    readonly apiKeys: ApiKeys;
    readonly audiences: Audiences;
    readonly batch: Batch;
    readonly broadcasts: Broadcasts;
    readonly contacts: Contacts;
    readonly domains: Domains;
    readonly emails: Emails;
    readonly topics: Topics;
    constructor(key?: string | undefined);
    fetchRequest<T>(path: string, options?: {}): Promise<Response<T>>;
    post<T>(path: string, entity?: unknown, options?: PostOptions & IdempotentRequest): Promise<Response<T>>;
    get<T>(path: string, options?: GetOptions): Promise<Response<T>>;
    put<T>(path: string, entity: unknown, options?: PutOptions): Promise<Response<T>>;
    patch<T>(path: string, entity: unknown, options?: PatchOptions): Promise<Response<T>>;
    delete<T>(path: string, query?: unknown): Promise<Response<T>>;
}

export { type Attachment, type CreateApiKeyOptions, type CreateApiKeyRequestOptions, type CreateApiKeyResponse, type CreateApiKeyResponseSuccess, type CreateAudienceOptions, type CreateAudienceRequestOptions, type CreateAudienceResponse, type CreateAudienceResponseSuccess, type CreateBatchOptions, type CreateBatchRequestOptions, type CreateBatchResponse, type CreateBatchSuccessResponse, type CreateBroadcastOptions, type CreateBroadcastRequestOptions, type CreateBroadcastResponse, type CreateBroadcastResponseSuccess, type CreateContactOptions, type CreateContactRequestOptions, type CreateContactResponse, type CreateContactResponseSuccess, type CreateDomainOptions, type CreateDomainRequestOptions, type CreateDomainResponse, type CreateDomainResponseSuccess, type CreateEmailOptions, type CreateEmailRequestOptions, type CreateEmailResponse, type CreateEmailResponseSuccess, type ErrorResponse, type GetAudienceResponse, type GetAudienceResponseSuccess, type GetContactOptions, type GetContactResponse, type GetContactResponseSuccess, type GetDomainResponse, type GetDomainResponseSuccess, type GetEmailResponse, type GetEmailResponseSuccess, type ListApiKeysResponse, type ListApiKeysResponseSuccess, type ListAudienceContactsOptions, type ListAudienceContactsResponse, type ListAudienceContactsResponseSuccess, type ListAudiencesResponse, type ListAudiencesResponseSuccess, type ListContactsApiResponseSuccess, type ListContactsOptions, type ListContactsResponse, type ListContactsResponseSuccess, type ListDomainsResponse, type ListDomainsResponseSuccess, type RemoveApiKeyResponse, type RemoveApiKeyResponseSuccess, type RemoveAudiencesResponse, type RemoveAudiencesResponseSuccess, type RemoveContactOptions, type RemoveContactsResponse, type RemoveContactsResponseSuccess, type RemoveDomainsResponse, type RemoveDomainsResponseSuccess, Resend, type SendBroadcastOptions, type SendBroadcastRequestOptions, type SendBroadcastResponse, type SendBroadcastResponseSuccess, type Tag, type UpdateContactOptions, type UpdateContactResponse, type UpdateContactResponseSuccess, type UpdateDomainsOptions, type UpdateDomainsResponse, type UpdateDomainsResponseSuccess, type VerifyDomainsResponse, type VerifyDomainsResponseSuccess };
